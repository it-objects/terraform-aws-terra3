import{_ as t,c as a,a0 as r,o as i}from"./chunks/framework.D5XSuxOt.js";const o="/assets/62128139.gnZHY9bz.png",m=JSON.parse('{"title":"Overview","description":"","frontmatter":{},"headers":[],"relativePath":"overview.md","filePath":"overview.md","lastUpdated":1736934587000}'),s={name:"overview.md"};function n(l,e,p,u,c,d){return i(),a("div",null,e[0]||(e[0]=[r('<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h1><p>Welcome to Terra3 - An opinionated Terraform module for ramping-up 3-tier architectures in AWS in no time!</p><p>This repository contains a collection of Terraform modules that aim to make it easier and faster for customers to get started with a 3-tier-architecture in <a href="https://aws.amazon.com/" target="_blank" rel="noreferrer">AWS</a>. It can be used to configure and provision a complete stack with</p><ul><li><p>a static website served from S3 and AWS Cloudfront</p></li><li><p>a containerized backend/API running on AWS ECS</p></li><li><p>an AWS RDS MySQL/Postgres database</p></li><li><p>an AWS ElastiCache Redis</p></li></ul><p>It is the result of many projects we did for customers with similar requirements. And rather than starting from scratch with every project, we&#39;ve created reusable Terraform modules. What started as an internal library, now evolved into a single module we&#39;d like to share and to give back to the community as open source.</p><p><strong>Features</strong></p><p>These are module features that allow cloud engineers to customize the AWS infrastructure setup, mostly by just setting the appropriate flag.</p><ul><li><p>Pre-configured NAT instance as optional low-cost alternative to NAT Gateway</p></li><li><p>Reasonable defaults such as &quot;Enabled VPC Gateway endpoint for S3&quot;, &quot;account-wide S3/EBS encryption&quot;</p></li><li><p>Database access for devs without SSH but via an SSM enabled bastion host</p></li><li><p>ECS Exec to quickly shell into a container in a debug stage</p></li><li><p>Optional multi-state Terraform to separate infrastructure from application deployment using AWS Parameter Store</p></li><li><p>Least privileged IAM roles and security groups settings</p></li><li><p>Transport encryption between Cloudfront and the Application Loadbalancer (if custom_domain is enabled)</p></li><li><p>and many more...</p></li></ul><h2 id="what-is-terra3" tabindex="-1">What is Terra3 <a class="header-anchor" href="#what-is-terra3" aria-label="Permalink to &quot;What is Terra3&quot;">​</a></h2><p>In its full-blown version it results in this AWS infrastructure setup:</p><p><img src="'+o+'" alt=""></p><p>For now, please visit our <a href="https://terra3.io/getting-started.html" target="_blank" rel="noreferrer">getting started</a> for a step-by-step walk-through to understand what different aspects Terra3 has to offer. We&#39;re planning to extend this documentation as a blog series, that will highlight the different features with each post. So stay tuned.</p><h2 id="what-can-i-do-with-this-solution" tabindex="-1">What can I do with this solution? <a class="header-anchor" href="#what-can-i-do-with-this-solution" aria-label="Permalink to &quot;What can I do with this solution?&quot;">​</a></h2><p>You can use it</p><ul><li><p>as ramp-up to quickly see your website or container run on AWS</p></li><li><p>as base for your next project to skip the nitty-gritty grunt work</p></li><li><p>for educational purposes</p></li></ul>',15)]))}const f=t(s,[["render",n]]);export{m as __pageData,f as default};
